version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: "n8n"
      POSTGRES_PASSWORD: "n8n"
      POSTGRES_DB: "n8n"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n -d n8n"]
      interval: 10s
      timeout: 5s
      retries: 6

  n8n:
    image: n8nio/n8n:latest
    restart: unless-stopped
    user: "1000:1000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: n8n
      DB_POSTGRESDB_PASSWORD: n8n
      N8N_HOST: localhost
      N8N_PORT: 5678
      N8N_PROTOCOL: http
      N8N_EDITOR_BASE_URL: http://localhost
      N8N_USER_FOLDER: /home/node/.n8n
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
      TZ: "${TZ:-Asia/Jakarta}"
      WEBHOOK_URL: "${PUBLIC_BASE_URL:-}"
      N8N_WEBHOOK_TUNNEL_URL: "${PUBLIC_BASE_URL:-}"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n-entrypoint.sh:/docker-entrypoint-custom.sh:ro
    entrypoint: ["/docker-entrypoint-custom.sh"]
    command: ["n8n", "start"]
    healthcheck:
      test:
        - CMD-SHELL
        - >-
          node <<'NODE'
          const http = require('http');
          const options = { host: 'localhost', port: 5678, path: '/healthz' };
          const request = http.get(options, (res) => {
            res.resume();
            if (res.statusCode >= 200 && res.statusCode < 400) {
              process.exit(0);
            }
            process.exit(1);
          });
          request.on('error', () => process.exit(1));
          request.setTimeout(1000, () => { request.destroy(); process.exit(1); });
          NODE
      interval: 30s
      timeout: 5s
      retries: 5

  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    depends_on:
      n8n:
        condition: service_healthy
    ports:
      - "80:80"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5

  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    depends_on:
      caddy:
        condition: service_started
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
    command: ["start", "--config", "/etc/ngrok.yml", "--all"]
    volumes:
      - ./ngrok.yml:/etc/ngrok.yml:ro

volumes:
  pgdata:
  n8n_data:
